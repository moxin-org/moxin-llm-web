---
import { Icon } from 'astro-icon/components';

export interface Props {
  currentLocale?: string;
  class?: string;
}

const { currentLocale = 'en', class: className = '' } = Astro.props;

const currentPath = Astro.url.pathname;
// Remove locale at start
let pathWithoutLocale = currentPath.replace(/^\/(en|cn)/, '');
// Remove trailing /en or /cn (for blog post pages)
pathWithoutLocale = pathWithoutLocale.replace(/\/(en|cn)(\/)?$/, '/');

const languages = [
  { code: 'en', name: 'English' },
  { code: 'cn', name: '中文' }
];

const currentLanguage = languages.find(lang => lang.code === currentLocale);

function getSwitchPath(targetLocale) {
  return `/${targetLocale}${pathWithoutLocale}`.replace(/\/+/g, '/');
}
---

<div class={`relative ${className}`}>
  <button
    type="button"
    class="flex items-center gap-2 px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-primary duration-150"
    aria-haspopup="listbox"
    aria-expanded="false"
    tabindex="0"
    onclick="this.nextElementSibling.classList.toggle('hidden')"
  >
    <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"/><path d="M2 12h20M12 2a15.3 15.3 0 010 20M12 2a15.3 15.3 0 000 20"/></svg>
    <span>{currentLanguage?.name}</span>
    <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round"><path d="M6 9l6 6 6-6"/></svg>
  </button>
  <ul class="absolute right-0 mt-2 w-32 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded shadow-lg z-10 hidden" tabindex="-1">
    {languages.map(lang => (
      <li key={lang.code}>
        <a
          href={getSwitchPath(lang.code)}
          class={`block px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 ${lang.code === currentLocale ? 'font-bold text-primary' : ''}`}
        >
          {lang.name}
        </a>
      </li>
    ))}
  </ul>
</div>

<script>
  // Language switcher dropdown functionality
  document.addEventListener('astro:page-load', () => {
    const languageSwitcher = document.querySelector('[data-aw-language-switcher]');
    const languageDropdown = document.querySelector('[data-aw-language-dropdown]');
    
    if (!languageSwitcher || !languageDropdown) return;
    
    // Toggle dropdown on click
    languageSwitcher.addEventListener('click', (e) => {
      e.stopPropagation();
      const isOpen = languageDropdown.classList.contains('opacity-100');
      
      if (isOpen) {
        languageDropdown.classList.remove('opacity-100', 'visible');
        languageDropdown.classList.add('opacity-0', 'invisible');
      } else {
        languageDropdown.classList.remove('opacity-0', 'invisible');
        languageDropdown.classList.add('opacity-100', 'visible');
      }
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!languageSwitcher.contains(e.target as Node) && !languageDropdown.contains(e.target as Node)) {
        languageDropdown.classList.remove('opacity-100', 'visible');
        languageDropdown.classList.add('opacity-0', 'invisible');
      }
    });
    
    // Close dropdown on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        languageDropdown.classList.remove('opacity-100', 'visible');
        languageDropdown.classList.add('opacity-0', 'invisible');
      }
    });
  });
</script> 